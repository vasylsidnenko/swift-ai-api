{
  "agent": {
    "model": {
      "provider": "openai",
      "model": "gpt-4o-mini"
    },
    "statistic": {
      "time": 47462,
      "tokens": 5654
    }
  },
  "question": {
    "topic": {
      "name": "SwiftUI",
      "platform": "iOS",
      "technology": "Swift"
    },
    "text": "Create a SwiftUI view that displays a list of items and allows users to add items. Each item should have a toggle switch to mark it as completed. When completed, the item should be displayed in a different color. Use State and Binding to manage the state of the items effectively. Ensure the user can add items via a TextField and that new items appear in the list immediately upon addition. Write the code and explain how State and Binding are used in this scenario.",
    "tags": [
      "SwiftUI",
      "iOS",
      "View",
      "State",
      "Binding",
      "List",
      "TextField",
      "Toggle"
    ],
    "answerLevels": {
      "beginner": {
        "name": "Beginner",
        "answer": "In this example, we will create a simple SwiftUI app that uses a List to display items. Each item can be toggled to show if it is completed or not. We will use State to manage the list of items and Binding to connect the toggles to the individual item states.\n\nHere\u2019s the code:\n\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var items: [Item] = []\n    @State private var newItemTitle: String = \"\"\n\n    var body: some View {\n        VStack {\n            TextField(\"New Item\", text: $newItemTitle)\n                .padding()\n\n            Button(\"Add Item\") {\n                let newItem = Item(title: newItemTitle)\n                items.append(newItem)\n                newItemTitle = \"\"\n            }\n            .padding()\n\n            List {\n                ForEach(items) { item in\n                    HStack {\n                        Toggle(isOn: Binding(\n                            get: { item.isCompleted },\n                            set: { item.isCompleted = $0 }\n                        )) {\n                            Text(item.title)\n                        }\n                        .toggleStyle(CheckboxToggleStyle())\n                        .foregroundColor(item.isCompleted ? .gray : .black)\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct Item: Identifiable {\n    let id = UUID()\n    var title: String\n    var isCompleted: Bool = false\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n``` \nIn this code, `@State` is used to manage the list of items and the new item's title. The `Toggle` uses `Binding` to link its state to the `isCompleted` property of the `Item` struct. This allows for two-way data binding, so changes in the toggle directly reflect in the item's state.",
        "tests": [
          {
            "snippet": "```swift\n@State private var items: [Item] = []\n``` What does `@State` indicate in this context?",
            "options": [
              "It is a constant value",
              "It allows for data binding",
              "It creates a new instance",
              "It defines a struct"
            ],
            "answer": "2"
          },
          {
            "snippet": "```swift\nToggle(isOn: Binding(\n    get: { item.isCompleted },\n    set: { item.isCompleted = $0 }\n)) {\n    Text(item.title)\n}\n``` What is the purpose of the `Binding` in this code?",
            "options": [
              "To create a new item",
              "To manage the state of UI components",
              "To define a computed property",
              "To retrieve data from a server"
            ],
            "answer": "2"
          },
          {
            "snippet": "```swift\nvar body: some View {\n    List {\n        ForEach(items) { item in\n            // ...\n        }\n    }\n}\n``` What does `ForEach` do in this context?",
            "options": [
              "Creates a new array",
              "Iterates over a collection",
              "Defines a new state variable",
              "Generates a list of items"
            ],
            "answer": "2"
          }
        ],
        "evaluation_criteria": "At the Beginner level, the student should understand basic syntax and fundamental concepts of SwiftUI. They should demonstrate the ability to read simple code examples, identify correct syntax, and understand basic programming patterns related to SwiftUI on iOS."
      },
      "intermediate": {
        "name": "Intermediate",
        "answer": "For the intermediate level, we will expand on the previous example by adding functionality to remove items from the list. This will require understanding how to manipulate the array of items and how to update the UI accordingly. We will also improve the UI with better layout and user feedback.\n\nHere\u2019s the code:\n\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var items: [Item] = []\n    @State private var newItemTitle: String = \"\"\n\n    var body: some View {\n        NavigationView {\n            VStack {\n                TextField(\"New Item\", text: $newItemTitle)\n                    .padding()\n\n                Button(\"Add Item\") {\n                    let newItem = Item(title: newItemTitle)\n                    items.append(newItem)\n                    newItemTitle = \"\"\n                }\n                .padding()\n\n                List {\n                    ForEach(items) { item in\n                        HStack {\n                            Toggle(isOn: Binding(\n                                get: { item.isCompleted },\n                                set: { item.isCompleted = $0 }\n                            )) {\n                                Text(item.title)\n                            }\n                            .toggleStyle(CheckboxToggleStyle())\n                            .foregroundColor(item.isCompleted ? .gray : .black)\n                        }\n                    }\n                    .onDelete(perform: deleteItems)\n                }\n            }\n            .navigationTitle(\"Item List\")\n        }\n    }\n\n    func deleteItems(at offsets: IndexSet) {\n        items.remove(atOffsets: offsets)\n    }\n}\n\nstruct Item: Identifiable {\n    let id = UUID()\n    var title: String\n    var isCompleted: Bool = false\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n``` \nIn this example, we have added a `NavigationView` and an `onDelete` modifier for the List, allowing users to remove items. The `deleteItems` function handles the deletion of items from the array. This implementation demonstrates a better understanding of state management and SwiftUI's data flow.",
        "tests": [
          {
            "snippet": "```swift\n.onDelete(perform: deleteItems)\n``` What is the purpose of the `onDelete` modifier?",
            "options": [
              "To allow users to edit items",
              "To trigger a function when an item is removed",
              "To display a confirmation dialog",
              "To add new items to the list"
            ],
            "answer": "2"
          },
          {
            "snippet": "```swift\nfunc deleteItems(at offsets: IndexSet) {\n    items.remove(atOffsets: offsets)\n}\n``` What does `IndexSet` represent in this function?",
            "options": [
              "A collection of item values",
              "A collection of indices to remove",
              "A type of state variable",
              "A SwiftUI view component"
            ],
            "answer": "2"
          },
          {
            "snippet": "```swift\nstruct Item: Identifiable {\n    let id = UUID()\n    var title: String\n    var isCompleted: Bool = false\n}\n``` What does `Identifiable` mean in this context?",
            "options": [
              "The struct can be used in a List",
              "It allows for unique identification of items",
              "It denotes a mutable struct",
              "It is a reserved keyword in Swift"
            ],
            "answer": "2"
          }
        ],
        "evaluation_criteria": "At the Intermediate level, the student should understand more complex implementations and common design patterns related to SwiftUI. They should demonstrate the ability to analyze code, identify potential issues, and understand the practical applications of SwiftUI concepts in iOS development."
      },
      "advanced": {
        "name": "Advanced",
        "answer": "At the advanced level, we will implement a more complex feature where the list of items can be categorized. Each category will have its own section in the List, and we will also implement data persistence using UserDefaults to save and load the items. This will showcase a comprehensive understanding of advanced SwiftUI concepts and architecture.\n\nHere\u2019s the code:\n\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    @State private var items: [Category] = loadItems()\n    @State private var newItemTitle: String = \"\"\n    @State private var selectedCategory: String = \"Work\"\n\n    var body: some View {\n        NavigationView {\n            VStack {\n                TextField(\"New Item\", text: $newItemTitle)\n                    .padding()\n\n                Picker(\"Select Category\", selection: $selectedCategory) {\n                    Text(\"Work\").tag(\"Work\")\n                    Text(\"Personal\").tag(\"Personal\")\n                }\n                .pickerStyle(SegmentedPickerStyle())\n                .padding()\n\n                Button(\"Add Item\") {\n                    if let index = items.firstIndex(where: { $0.name == selectedCategory }) {\n                        items[index].items.append(Item(title: newItemTitle))\n                        newItemTitle = \"\"\n                    }\n                }\n                .padding()\n\n                List {\n                    ForEach(items) { category in\n                        Section(header: Text(category.name)) {\n                            ForEach(category.items) { item in\n                                Toggle(isOn: Binding(\n                                    get: { item.isCompleted },\n                                    set: { item.isCompleted = $0 }\n                                )) {\n                                    Text(item.title)\n                                }\n                                .foregroundColor(item.isCompleted ? .gray : .black)\n                            }\n                            .onDelete(perform: { offsets in\n                                deleteItems(at: offsets, in: category)\n                            })\n                        }\n                    }\n                }\n            }\n            .navigationTitle(\"Categorized Items\")\n        }\n    }\n\n    func deleteItems(at offsets: IndexSet, in category: Category) {\n        if let index = items.firstIndex(where: { $0.name == category.name }) {\n            items[index].items.remove(atOffsets: offsets)\n        }\n    }\n\n    static func loadItems() -> [Category] {\n        // Load items from UserDefaults or return default categories\n        return [Category(name: \"Work\", items: []), Category(name: \"Personal\", items: [])]\n    }\n}\n\nstruct Category: Identifiable {\n    let id = UUID()\n    var name: String\n    var items: [Item] = []\n}\n\nstruct Item: Identifiable {\n    let id = UUID()\n    var title: String\n    var isCompleted: Bool = false\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n``` \nIn this code, we introduced categories for items using the `Category` struct. Each category can have its own items, and we have sections in the List for each category. The `loadItems` function is designed to simulate loading from persistent storage, showcasing a more advanced understanding of SwiftUI and its application in real-world scenarios.",
        "tests": [
          {
            "snippet": "```swift\nstruct Category: Identifiable {\n    let id = UUID()\n    var name: String\n    var items: [Item] = []\n}\n``` What does `Identifiable` allow the `Category` struct to do?",
            "options": [
              "Be used in a SwiftUI List",
              "Be initialized with default values",
              "Store user preferences",
              "Define computed properties"
            ],
            "answer": "1"
          },
          {
            "snippet": "```swift\nPicker(\"Select Category\", selection: $selectedCategory) {\n    Text(\"Work\").tag(\"Work\")\n}\n``` What role does the `Picker` play in this UI?",
            "options": [
              "It displays a list of items",
              "It allows category selection",
              "It stores item data",
              "It initializes the app"
            ],
            "answer": "2"
          },
          {
            "snippet": "```swift\nstatic func loadItems() -> [Category] {\n    // Load items from UserDefaults or return default categories\n}\n``` What is the purpose of the `loadItems` function?",
            "options": [
              "To add new items to the list",
              "To remove items from UserDefaults",
              "To persist data across app launches",
              "To load and return categories of items"
            ],
            "answer": "4"
          }
        ],
        "evaluation_criteria": "At the Advanced level, the student should demonstrate deep understanding of SwiftUI internals and optimization techniques. They should be able to evaluate complex implementations, understand performance implications, and apply advanced patterns related to SwiftUI in sophisticated iOS applications."
      }
    }
  }
}